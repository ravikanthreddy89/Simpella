0721550387
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.UUID;
//routing table
class RoutingTable {
	//InetAddress ip;
	byte[] GUID= new byte[16];
	Socket s;
}

// database for downloads

class Downloads{
	InetAddress ip;
	float downloaded_percentage;
	int downloaded_size;
	float total_size;
	int port;
			
}


//database for simpella connections
class SimpellaConnections {
	public SimpellaConnections() {
		packets_sent=0;
		packets_rxd=0;
		bytes_rxd=0;
		bytes_sent=0;
	}
	InetAddress ip;
	int port;
	int packets_sent;
	int packets_rxd;
	int bytes_sent;
	int bytes_rxd;
	Socket s;
}

//database for find results
class FindResult{
	InetAddress ip;
	String file_name;
	int file_size;
	int port_no;
	int file_index;
	
}

// database for list
class List {
	InetAddress ip;
	String file_name;
	int file_size;
	int port_no;
	int file_index;
	
}

class SharedLibrary
{
	int file_index;
	int file_size;
	String file_name;
	//String file_path;
}
class HostInfo
{
	InetAddress ip;
	int port_no;
	int files_shared;
	int shared_size;
}
class MY_UUID
{
	byte[] GUID= new byte[16];
}

public class Database {
	final int ROUTING_SIZE=160;
	final int  LIST_SIZE=1000;
	
	static boolean monitor=false;
	static UUID servent_id= UUID.randomUUID();
static InetAddress local_host;
static int simpella_port;
static int download_port;
	static int total_no_of_hosts=1;
static 	int total_files_shared=0;
static long total_size_of_files_shared=0;
	static long local_size_of_files_shared=0;
	static int local_files_shared=0;
	static int no_incoming=0 ;
	static int no_outgoing=0;
	int packets_rcvd=0;
	int packets_sent=0;
	int bytes_sent=0;
	int bytes_rcvd=0;
	int queries_rcvd=0;
	int responses_sent=0;
	static String file_directory;
	ArrayList<MY_UUID>MyUUID_db=new ArrayList<MY_UUID>( );
	ArrayList <FindResult> FindResult_db= new ArrayList<FindResult>();
	ArrayList <List> List_db = new ArrayList<List>(LIST_SIZE);
	ArrayList<HostInfo> HostInfo_db=new ArrayList<HostInfo>();
	LinkedList<SimpellaConnections> SimpellaConnections_db= new LinkedList<SimpellaConnections>();
	LinkedList<Downloads> Downloads_db = new LinkedList<Downloads>();
	ArrayList<RoutingTable> RoutingTable_db = new ArrayList<RoutingTable>(ROUTING_SIZE);
	static int routing_position=0;
	ArrayList<SharedLibrary> SharedLibrary_db=new ArrayList<SharedLibrary>();
	
	Object formater(int x){
		 float temp;
		 String s=null;
		if(x<1024){
			   s=x+"";
		   }
		else if(x>1024){
			   temp=x/1024;
			   s= x+"k";
		   }
		else if (x>1000000){
			temp=x/1000000;
			s=x+"M";
		}
		   		
		  return s;
	}
	
}
import java.io.BufferedReader;
import java.io.FileOutputStream;


public class DownloadThread extends Thread{
	FileOutputStream fos;
	Downloads download;
	BufferedReader br;
	Database d;
public DownloadThread(BufferedReader br,FileOutputStream fos,Downloads download,Database d) {
this.br=br;
	this.fos=fos;
this.download=download;
this.d=d;
	this.start();
}
	public void run()
{
		int c1=0;
		int count=0;
		
		try
		{
			while((c1=br.read())!=-1)
		
		{
			
			fos.write(c1);
			count++;
			download.downloaded_size=count;
			download.downloaded_percentage=(float)(Math.round(((1.0*download.downloaded_size/download.total_size)*100)*10)/10.0);
		}
		fos.close();
		
		System.out.println("download done");
d.Downloads_db.remove(download);
		}
catch(Exception e)
{
	e.printStackTrace();
}

}
}import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;


public class InputCommandHandler extends Thread 
{
Database d;
	public InputCommandHandler(Database d) {
		// TODO Auto-generated constructor stub
	this.d=d;
	this.start();
	}
	public void run()
{
	BufferedReader inFromUser=new BufferedReader(new InputStreamReader(System.in));
	String cmd;
		while(true)
	{
		System.out.print("\nSimpella>");
			try {
			cmd=inFromUser.readLine();
		cmd=cmd.trim();
		StringTokenizer st=new StringTokenizer(cmd);
		String s;
		if(st.hasMoreElements())
		{
			s=st.nextToken();
			
			// info command block
			//=======================================================================================================
		if(s.equals("info"))
		{
			if(st.hasMoreElements())
			{
			s=st.nextToken();
			if(s.equals("c"))
			{
				System.out.println("CONNECTION STATS:\n---------------");
		synchronized (d.SimpellaConnections_db) {
			for (int i=0;i<d.SimpellaConnections_db.size();i++)
			{
				System.out.println(i+1+")"+d.SimpellaConnections_db.get(i).ip+":"+d.SimpellaConnections_db.get(i).port+"\t"+"Packs: "+d.SimpellaConnections_db.get(i).packets_sent+":"+d.SimpellaConnections_db.get(i).packets_rxd+"\t"+"Bytes: "+d.SimpellaConnections_db.get(i).bytes_sent+":"+d.SimpellaConnections_db.get(i).bytes_rxd);
			}
		}	
			}
			else if(s.equals("d"))
			{
				synchronized(d.Downloads_db)
				{
					Downloads download;
					Iterator i=d.Downloads_db.iterator();
					float total_size;
					float download_size;
					int count=1;
					while(i.hasNext())
					{
						String str_total;
						String str_download;
						download=(Downloads) i.next();
						total_size=download.total_size;
						download_size=download.downloaded_size;
						int m=1024*1024;
						int k=1024;
						if(total_size>m)
						{
							str_total=(total_size/m)+"M";
						}
						else if(total_size>k)
						{
							str_total=(total_size/k)+"K";
						}
						else
							str_total=(total_size)+"bytes";
						if(download_size>m)
						{
							str_download=(download_size/m)+"M";
						}
						else if(download_size>k)
						{
							str_download=(download_size/k)+"K";
						}
						else
							str_download=(download_size)+"bytes";	
						System.out.println("DOWNLOAD STATS:\n---------------");	
						System.out.println(count+")"+download.ip+":"+download.port+"\t"+download.downloaded_percentage+"%\t"+str_download+"/"+str_total);
					count++;
					}
				}
			}
			else if(s.equals("h"))
			{
				long  size=Database.total_size_of_files_shared;
				String str_size;
				int m=1024;
				
				if(size>m)
				{
				str_size=size/m+"M";
				
				}
				else
					
					{
						str_size=size+"K";
					}
					
				System.out.println("HOST STATS:\n---------------");
				System.out.println("Hosts: "+d.total_no_of_hosts+"\tNum Shared: "+d.total_files_shared+"\t"+"Size Shared: "+str_size);	
	//cool
			
				for(int i=0;i<d.HostInfo_db.size();i++)
				{
					System.out.println(d.HostInfo_db.get(i).ip);
					System.out.println(d.HostInfo_db.get(i).port_no);
				}
				//
			
			}
			else if(s.equals("n"))
			{
			    	    
			    
				System.out.println("Messages rxd: "+d.formater(d.packets_rcvd)+"\tMessages sent "+d.formater(d.packets_sent));
			    System.out.println("Unique GUIDs in memory : "+d.formater((d.RoutingTable_db.size()+d.MyUUID_db.size())));
			    System.out.println("Bytes rxd: "+d.formater(d.bytes_rcvd)+"\tBytes sent "+d.formater(d.bytes_sent));
			}
			else if(s.equals("q"))
			{
				
				System.out.println("QUERY STATS:\n---------------");
				System.out.println("Queries: "+d.queries_rcvd+"\t"+"Responses Sent: "+d.responses_sent);
				
			}
			else if(s.equals("s"))
			{
			long  size=d.local_size_of_files_shared;
				String str_size;
				int m=1024;
			
				if(size>m)
				{
				str_size=size/m+"M";
				
				}
				
					else
					{
						str_size=size+"K";
					}
				
				System.out.println("SHARE STATS:\n---------------");
				System.out.println("Num Shared: "+d.local_files_shared+"\t"+"Size Shared: "+str_size);
			}
			else
			{
				System.out.println("\nEnter a valid option : [cdhnqs]");	
			}
			
			}
			else
			{
				System.out.println("\nEnter a valid option : [cdhnqs]");
			}
		}
		else if(s.equals("share"))
		{
			if(st.hasMoreElements())
			{
				s=st.nextToken();
				if(s.endsWith("-i"))
				{
//					File f=new File(".");
//				Database.file_directory=f.getCanonicalPath();
//				System.out.println("\nsharing "+Database.file_directory);
				if(Database.file_directory==null)
				System.out.println("No  directory currently shared!!!");
				else
					System.out.println("sharing  "+Database.file_directory);
				}
				else
				{
					File f=new File(s);
					if(f.isDirectory())
					{
					Database.file_directory	=s;
					
					System.out.println("\nsharing "+f.getAbsolutePath());
					}
					else
					{
						System.out.println("\nEnter a valid Directory to be shared!!!");
					}
					}
				
				
			}
			else
				System.out.println("\nEnter a Directory name to be shared or -i option to share current directory!!!");
		}
		
		
		// scan command block
		//===================================================================================
		else if(s.equals("scan"))
		{
		     String path=Database.file_directory;
		    if(path!=null)
		    {
		     File f=new File(path);
		     int i=0;
		     long local_size=0;
		     if(f.isDirectory())
		     {
		    	
		    	 synchronized(d.SharedLibrary_db)
			    	{
		    		 d.SharedLibrary_db.clear();
		    System.out.println("Scanning "+f.getAbsolutePath()+" for files...");
		    		 for (File child:f.listFiles())
		    {
		    	SharedLibrary sl=new SharedLibrary();
		    	sl.file_index=i+1;
		    	sl.file_name=child.getName();
		    	
		    	
		    	
		    	sl.file_size=(int)child.length();
		    	local_size=local_size+sl.file_size;
		    	d.SharedLibrary_db.add(sl);
		    	i++;
		    	}
		    		
		    		 //info h
		    		Database.total_files_shared-=Database.local_files_shared;
		    		Database.total_size_of_files_shared-=Database.local_size_of_files_shared;
		    		
		    		 //
		    		 
		    		 
		    		 Database.local_files_shared=i;
		    		Database.local_size_of_files_shared=local_size/1024;;
		    		System.out.println("Scanned "+Database.local_files_shared+"files and "+local_size+" bytes ");
		    		 
		    //info h
		    		Database.total_files_shared+=Database.local_files_shared;
		    		Database.total_size_of_files_shared+=Database.local_size_of_files_shared;
		    		//
			    	}
		     }
		     else
		     {
		    	 System.out.println("No such Directory!!!");
		     }
		}
		else
		{
		System.out.println("Enter a valid directory to be shared First!!!");	
		}
		}
		
		else if(s.equals("open"))
		{
			
			if(Database.no_outgoing<3)
			{
				
			if(st.hasMoreElements())
		{
			s=st.nextToken();
			StringTokenizer st1=new StringTokenizer(s,":");
			SimpellaConnections sc=new SimpellaConnections();
			try
			{
			sc.ip=InetAddress.getByName((String) st1.nextElement());
			if(st1.hasMoreElements())
		    {  
	        sc.port=Integer.parseInt((String) st1.nextElement());
			if(sc.port<1||sc.port>65535)
				throw new NumberFormatException();
			
			sc.s=new Socket(sc.ip,sc.port);
		DataOutputStream dos=new DataOutputStream(sc.s.getOutputStream());
		String connect="SIMPELLA CONNECT/0.6\r\n";
		dos.writeBytes(connect);
		BufferedReader br=new BufferedReader(new InputStreamReader(sc.s.getInputStream()));
		String reply=br.readLine();
		 st1=new StringTokenizer(reply);
		 s=st1.nextToken();
		 if(s.equals("SIMPELLA/0.6"))
		 {
			if(st1.hasMoreElements())
			{
			s=st1.nextToken();
			if(s.equals("200"))
			{
				s="";
				while(st1.hasMoreElements())
					s+=st1.nextToken();
				System.out.println(s);
				synchronized (d.SimpellaConnections_db) {
					d.SimpellaConnections_db.add(sc);
				}
				new SimpellaSocketHandler(d, sc,false);
				Database.no_outgoing++;
			//sending ping to all
				{
					synchronized (d.HostInfo_db) {
						Database.total_no_of_hosts=1;
						Database.total_files_shared=Database.local_files_shared;
						Database.total_size_of_files_shared=Database.local_size_of_files_shared;
						d.HostInfo_db=new ArrayList<HostInfo>();
						Message m=new Message(d);
						m.PingCreator();
						byte[]ping=m.ping;
						SimpellaConnections sc1;
					for(int i=0;i<d.SimpellaConnections_db.size();i++)//flooding ping
					{
						sc1=d.SimpellaConnections_db.get(i);
						Socket s1=d.SimpellaConnections_db.get(i).s;
						 dos=new DataOutputStream(s1.getOutputStream());
						dos.write(ping);
						d.packets_sent+=1;
						d.bytes_sent+=ping.length;
						sc1.packets_sent++;
						sc1.bytes_sent+=ping.length;
				}
				
					}
				}///end of sending ping to all
			}
			else
				if(s.equals("503"))
				{
					s="";
					while(st1.hasMoreElements())
						s+=st1.nextToken();
					System.out.println(s);
					sc.s.close();
				}
				else
				{
					System.out.println("Invalid Simpella reply");
					 sc.s.close();
				}
			}
			else
			{
				System.out.println("Invalid Simpella reply");
				 sc.s.close();
			}
		 }
		 else
		 {
			 System.out.println("Invalid Simpella reply");
			 sc.s.close();
		 }
			}
			else
				System.out.println("Invalid syntax:open <hostname>:<port>");
			}
			catch(NumberFormatException n)
			{
				System.out.println("Enter a valid port number");
			}
			catch(UnknownHostException e)
			{
				System.out.println("Not reachable IP");
			}
		}

			else
				System.out.println("Enter Ip address and por number!!!");	
		}

			else
			{
				System.out.println("Reached maximum outgoing connections!!!");
			}
		}
		
		
		//update command block
		//=============================================================================
		else if(s.equals("update"))//update
		{
		synchronized (d.HostInfo_db) {
			Database.total_no_of_hosts=1;
			Database.total_files_shared=Database.local_files_shared;
			Database.total_size_of_files_shared=Database.local_size_of_files_shared;
			d.HostInfo_db=new ArrayList<HostInfo>();
			Message m=new Message(d);
			m.PingCreator();
			byte[]ping=m.ping;
			SimpellaConnections sc1;
		for(int i=0;i<d.SimpellaConnections_db.size();i++)//flooding ping
		{
			sc1=d.SimpellaConnections_db.get(i);
			Socket s1=d.SimpellaConnections_db.get(i).s;
			DataOutputStream dos=new DataOutputStream(s1.getOutputStream());
			dos.write(ping);
			d.packets_sent+=1;
			d.bytes_sent+=ping.length;
			sc1.packets_sent++;
			sc1.bytes_sent+=ping.length;
			//dos.close();
		}
		}
			
		}
		
	
		//find command block
		//==================================================================================
		else if(s.equals("find"))
		{
			
				  //clear the find result array list to store new result set
					d.FindResult_db.clear();
				
				  // creating query message
				     String q="";
				
				    while(st.hasMoreElements()){
				    	q+=" "+st.nextToken();
				    }
				    
				    Message m= new Message(d,q);
				    m.QueryCreator();
				    byte[] query=m.query;
				    //for (int p=0; p<16;p++) System.out.println(" "+p+")"+query[p]);
				    synchronized(d.SimpellaConnections_db) {
				     for(int i=0; i< d.SimpellaConnections_db.size(); i++){
				    	DataOutputStream dos=new DataOutputStream( d.SimpellaConnections_db.get(i).s.getOutputStream());
				    	dos.write(query);
				    	//dos.close();
				    	d.SimpellaConnections_db.get(i).bytes_sent+=query.length;
				    	d.SimpellaConnections_db.get(i).packets_sent++;
				     }// end of for loop
				     
				    }// end of synchronized block, this block floods query
				      
				      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				      System.out.println("Searching Simpella network for "+"'"+q+"'");
				      System.out.println("press enter to continue");
				      br.readLine();
				      System.out.println("Please wait. Retrieving responses......");
				      Thread.sleep(3000);
				      System.out.println("---------------------------------------");
				     
				      System.out.println(d.FindResult_db.size()+" responses received");
				     
				      
				      for(int i=0 ; i<d.FindResult_db.size();i++){
				    	   System.out.println((i+1)+") "+d.FindResult_db.get(i).ip.toString()+":"+d.FindResult_db.get(i).port_no+"\tSize:"+d.FindResult_db.get(i).file_size);
				    	   System.out.println("Name : "+d.FindResult_db.get(i).file_name);
				    	   
				      }
				      
					
		}
		
		// end of find command block
		
		
		// list command block
		//==================================================================
   		else if(s.equals("list"))
		{
			
				for(int i=0;i<d.List_db.size();i++){
					System.out.println((i+1)+") "+d.List_db.get(i).ip.toString()+":"+d.List_db.get(i).port_no+"\tSize:"+d.List_db.get(i).file_size);
			    	   System.out.println("Name : "+d.List_db.get(i).file_name);
				}
			
			
	
		}
	
   		
		// clear command block
		//========================================================================

   		else if(s.equals("clear"))
		{
			
				// check if any file number is provided
				
				if(st.hasMoreElements()){
					int f_no= Integer.parseInt( st.nextToken());
					// check if file number is beyond the size of list_db
					
					if(f_no > d.List_db.size()){
						 System.out.println("File number is out of range");
						 
					}
					else{
						d.List_db.remove(f_no);
					}
				}
		
				// if no file number is provided clear all the files
				else{
					d.List_db.clear();
				}
	
		}

   		// download command block
		//===================================================
   		
   		else if(s.equals("download"))
		{
	
   			try
   			{
			int file_num=Integer.parseInt(st.nextToken());
			if(file_num<=d.FindResult_db.size())
			{
							
				Downloads download=new Downloads();
				int file_index=d.FindResult_db.get(file_num-1).file_index;
				int port=d.FindResult_db.get(file_num-1).port_no;
				String file_name=d.FindResult_db.get(file_num-1).file_name;
				Socket downloadclient=new Socket(d.FindResult_db.get(file_num-1).ip, port);			
				DataOutputStream dos=new DataOutputStream(downloadclient.getOutputStream());
				download.ip=d.FindResult_db.get(file_num-1).ip;
				download.port=port;
				download.total_size=d.FindResult_db.get(file_num-1).file_size;
				String request="GET /get/"+file_index+"/"+file_name+" HTTP/1.1\r\nUser-Agent: Simpella\r\nHost: "+d.FindResult_db.get(file_num-1).ip.getHostAddress()+":"+port+"\r\nConnection: Keep-Alive\r\nRange: bytes=0-\r\n\r\n";
				dos.writeBytes(request);
				String reply="";
				String c;
				BufferedReader br=new BufferedReader(new InputStreamReader(downloadclient.getInputStream()));
			
			while (!(c= br.readLine()).isEmpty()) {
				reply= reply + "\r\n" + c;
				
			}
			reply+="\r\n\r\n";
			if (reply.endsWith("\r\n\r\n"))
				;
			else
				throw new InvalidHttpException();
			
			
			StringTokenizer str = new StringTokenizer(reply, "\r\n");
			if(str.hasMoreElements())
			{
				StringTokenizer str1 = new StringTokenizer(str.nextToken());
			
				
					if (str1.hasMoreElements()) {
						s = str1.nextToken();
						if (s.equals("HTTP/1.1")) {
							
							if (str1.hasMoreElements())
							{
								s=str1.nextToken();
								if(s.equals("200"))
								{
									d.Downloads_db.add(download);
									download.downloaded_size=0;
									download.downloaded_percentage=0;
									//download.total_size=file_size;
									
									DataInputStream dis=new DataInputStream(downloadclient.getInputStream());
									int r=0;
									File f=new File(file_name);
									if(!f.exists())
										f.createNewFile();
									FileOutputStream fos=new FileOutputStream(f);
									System.out.println("Download started!!!");
									new DownloadThread(br,fos,download,d);
//									int c1=0;
//									int count=0;
//									while((c1=br.read())!=-1)
//									{
//										
//										fos.write(c1);
//										count++;
//										download.downloaded_size=count/1024;
//										download.downloaded_percentage=(download.downloaded_size/download.total_size)*100;
//									}
//									fos.close();
//									System.out.println("download done");
								}
								else
									if(s.equals("503"))
									{
										System.out.println("File not Found!!!");
										downloadclient.close();
									}
							}
						} else
							throw new InvalidHttpException();
					
			
				
			}
				
			}
			else
				throw new InvalidHttpException();
			
			
			}
			else
			{
				System.out.println("No such file index!!!");
			}

}
catch(InvalidHttpException e)
{
	System.out.println("Invalid Http response");
}
catch(Exception e)
{
	e.printStackTrace();
}
			//////////
		}
		
		
   		else if(s.equals("monitor"))
   		{
   			Database.monitor=true;
   			System.out.println("\nMONITORING SIMPELLA NETWORK:");
   		System.out.println("Press enter to continue");
   		inFromUser.readLine();
   			System.out.println("-----------------------------------------------");
   		inFromUser.readLine();
   		Database.monitor=false;
   		}
		
		
   		else
   		{
   			System.out.println("Invalid Simpella command!!!");
   		}
		
			}
		
			
	
		}
		
		 catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}}

		
		
			
	}
			

	
}import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.StringTokenizer;


public class IntelligentClientHandler extends Thread {
Database d;
	public IntelligentClientHandler(Database d) {
		this.d=d;
		this.start();
		}
public void run()
{
while(true)
{
	boolean flag=false;
	if(Database.no_outgoing<3)
{
	for(int i=0;i<d.HostInfo_db.size();i++)
	{
		
		for(int j=0;j<d.SimpellaConnections_db.size();j++)
		{
			
			if(d.SimpellaConnections_db.get(j).ip.equals(d.HostInfo_db.get(i).ip)&&d.SimpellaConnections_db.get(j).port==d.HostInfo_db.get(i).port_no)
			{
			flag=true;
			}
		}
			if(flag)
			{
				try
				{
					
					SimpellaConnections sc=new SimpellaConnections();
				sc.s=new Socket(d.HostInfo_db.get(i).ip,d.HostInfo_db.get(i).port_no);
				DataOutputStream dos=new DataOutputStream(sc.s.getOutputStream());
				String connect="SIMPELLA CONNECT/0.6\r\n";
				dos.writeBytes(connect);
				BufferedReader br=new BufferedReader(new InputStreamReader(sc.s.getInputStream()));
				String reply=br.readLine();
				StringTokenizer st1=new StringTokenizer(reply);
				String  s=st1.nextToken();
				 if(s.equals("SIMPELLA/0.6"))
				 {
					if(st1.hasMoreElements())
					{
					s=st1.nextToken();
					if(s.equals("200"))
					{
						s="";
						while(st1.hasMoreElements())
							s+=st1.nextToken();
						System.out.println(s);
						synchronized (d.SimpellaConnections_db) {
							d.SimpellaConnections_db.add(sc);
						}
						new SimpellaSocketHandler(d, sc,false);
						Database.no_outgoing++;
					break;
					}
					else
						if(s.equals("503"))
						{
							s="";
							while(st1.hasMoreElements())
								s+=st1.nextToken();
							System.out.println(s);
							sc.s.close();
						}
						else
						{
							System.out.println("Invalid Simpella reply");
							 sc.s.close();
						}
					}
					else
					{
						System.out.println("Invalid Simpella reply");
						 sc.s.close();
					}
				 }
				 else
				 {
					 System.out.println("Invalid Simpella reply");
					 sc.s.close();
				 }
			}
			
			catch(Exception e){
				e.printStackTrace();
			}
		}
	}
}
	else
	{
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
}
}

                                                                     
                                                                     
                                                                     
                                             
import java.io.File;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.UUID;

// class to store the result set of query hit search
class result_set {	
	int index;
	int size;
	String name;
}

class Message {
	// various fields used in message header
	byte[] message_id= new byte[16];
	byte message_type;
	byte ttl=(byte)7;
	byte hops=(byte)0;
	byte[] payload_length = new byte[4];

	// different headers and messages
	byte[] header = new byte[23];
	byte[] ping= new byte[23];
	byte[] pong= new byte[23+14];// 23 headerlength + 14 payload length
	byte[] query;
	byte[] query_hit;
	Database db;
	String query_string;
	String query_string2;
	int query_length;
	
	// arraylist to store query hit result set
	ArrayList<result_set> hits= new  ArrayList<result_set> ();
  // constructor for ping and pong messages
	Message(Database d){
		db= d;
	}
	

	
	// constructor for query creator
	Message(Database d, String query_string){
		db=d;
		
		query_string2= query_string+"\0";
		query_length=query_string2.getBytes().length;
		query= new byte[23+2+query_length];	
	     }
	
	
	
	
	void PingCreator() {
		// message id generation
				UUID guid = UUID.randomUUID();
				long  most_sig_bits=guid.getMostSignificantBits();
				long least_sig_bits=guid.getLeastSignificantBits();
				byte[] msb= ByteBuffer.allocate(8).putLong(most_sig_bits).array();
				byte[] lsb= ByteBuffer.allocate(8).putLong(least_sig_bits).array();
			 	System.arraycopy(msb, 0, message_id , 0, 8);
			 	System.arraycopy(lsb, 0, message_id, 8, 8);
			 	message_id[8]=(byte) 0xFF;
			 	message_id[15]=(byte) 0x00;
			 	System.arraycopy(message_id, 0, header, 0, 16);
			 	// end of message id generation block
	
			 	MY_UUID m=new MY_UUID();
				System.arraycopy(message_id, 0, m.GUID, 0 , 16);
				db.MyUUID_db.add(m);
			
			 	// message type
				message_type=0;   
				header[16]= message_type;
				
				// ttl
				header[17]=ttl;
				
				//hops
				header[18]=hops;
				
				// payload length=0 for ping message  
			 	payload_length= ByteBuffer.allocate(4).putInt(0).array();
			 	System.arraycopy(payload_length, 0, header, 19, 4);
			 	
			 	System.arraycopy(header, 0 , ping,0,23);
	}// ping creator block
	
	
	void PongCreator(byte [] guid) {
		
		//dumping ping message id into  Message Id
		System.arraycopy(guid , 0, header, 0, 16);
		 
		//Message type
		message_type=1;
		header[16]=message_type;
		
		// ttl
		header[17]= ttl;
		
		//hops
		header[18]=hops;
		
		// payload length
		payload_length =  ByteBuffer.allocate(4).putInt(14).array();// payload length
		System.arraycopy(payload_length, 0, header, 19, 4);
		
		// payload
		byte [] payload = new byte[14];
		
		byte[] portNo= new byte[2];
		portNo[0]= (byte)((Database.simpella_port>>8)&255);
		portNo[1]=(byte)((Database.simpella_port)&255);

		System.arraycopy(portNo, 0, payload, 0, 2);
		
		// copying ip address of localhost into Ip address field of payload
		System.arraycopy((Database.local_host).getAddress(), 0, payload, 2, 4);
		
	   if(Database.file_directory==null){
		    Database.file_directory= ".";
	   }
		File f= new File(Database.file_directory);
	
		
		
		// copying number of files shared by local host into no of files field of payload
		
		byte [] temp = new byte[4];
	    temp =  ByteBuffer.allocate(4).putInt(f.list().length).array();
	    
	    System.arraycopy(temp, 0, payload, 6, 4);
	    
	    long file_size=0;
	    for(int i=0; i<f.list().length ; i++ ) file_size=((f.listFiles())[i].length())+file_size;
	    int file_size_in_kb = (int)(file_size/1024);
	    
	    temp=ByteBuffer.allocate(4).putInt(file_size_in_kb).array();
	    
	    System.arraycopy(temp, 0, payload, 10, 4);
	    
	    
	    System.arraycopy(header, 0, pong, 0, 23);
	    System.arraycopy(payload, 0, pong, 23, 14);
	    
	}// pong creator block
	
	
	void QueryCreator(){
		
		UUID guid = UUID.randomUUID();
		long most_sig_bits= guid.getMostSignificantBits();
		long least_sig_bits= guid.getLeastSignificantBits();
		
		byte[] msb= ByteBuffer.allocate(8).putLong(most_sig_bits).array();
		byte[] lsb= ByteBuffer.allocate(8).putLong(least_sig_bits).array();
		
		System.arraycopy(msb, 0, message_id , 0, 8);
		System.arraycopy(lsb, 0, message_id, 8, 8);
		System.arraycopy(message_id, 0, header, 0, 16);
		// end of message id generation block
		
		MY_UUID m=new MY_UUID();
		System.arraycopy(message_id, 0, m.GUID, 0 , 16);
		db.MyUUID_db.add(m);
		
		//message type
		message_type=(byte) 0x80;
		header[16]= message_type;
		 
		// ttl
		header[17]= ttl;
	    
		//hops
		header[18]=hops;
		
		// filling payload length bytes of header
		payload_length=ByteBuffer.allocate(4).putInt(query_length+2).array();
		System.arraycopy(payload_length, 0, header, 19, 4);
		
		// dumping header into query message
		System.arraycopy(header,0,query,0,23);
		
		query[23]=(byte)0;
		query[24]=(byte)0;
		
		// dumping query string into payload of query message
		System.arraycopy(query_string2.getBytes(), 0, query, 25, query_length);
		
	}// query creator block
	
	
	// query hit creator block
	//==================================================================================
	void QueryHitCreator(byte[] q) {
		
				//message id
				System.arraycopy(q,0 , header, 0 ,16);
				
				//message type
				message_type=(byte) 0x81;
				header[16]= message_type;
			    
				// ttl
				header[17]=ttl;
				
				
				//hops
				header[18]=hops;		
		
		       //calculating query string length
				byte [] t= new byte[4];
				System.arraycopy(q,19, t, 0, 4);
				
		  
		
		byte[] b= new byte[Integer.parseInt(String.valueOf(ByteBuffer.wrap(t).getInt()))-2];
		System.arraycopy(q, 25, b, 0, (Integer.parseInt(String.valueOf(ByteBuffer.wrap(t).getInt())))-2);
		
		String s=new String(b);
		String search_text =s.substring(0, s.length()-1);
		StringTokenizer st= new StringTokenizer(search_text);
		int x=0;
		while(st.hasMoreElements()){
			String temp=st.nextToken();
			
			int j=0;
			
			
			//=================================
			for(int i=0; i<db.SharedLibrary_db.size(); i++ ) {
				 
				
			//	StringTokenizer l= new StringTokenizer(db.SharedLibrary_db.get(i).file_name.substring(0,db.SharedLibrary_db.get(i).file_name.indexOf(".") ));
				
			//	while(l.hasMoreElements()){
				//	 } // end of if loop
				if(db.SharedLibrary_db.get(i).file_name.contains(temp)){
					 hits.add(new result_set());
					 
					 hits.get(j).index= db.SharedLibrary_db.get(i).file_index;
					 hits.get(j).size= db.SharedLibrary_db.get(i).file_size;
					 
					 // concatinating null character at the end of file name;
					 hits.get(j).name= db.SharedLibrary_db.get(i).file_name+"\0";
					 x+=(8+hits.get(j).name.getBytes().length);
					 j++;
					 break;
				
					
				}// end of while loop
				
				
						
					 
			}// end of for loop
			
		}// end of while loop
		
		
		
		
		
		
		//payload length
		
		byte[] temp= new byte[4];
		temp=ByteBuffer.allocate(4).putInt(1+2+4+4+x+16).array();
		
		System.arraycopy(temp, 0, header, 19, 4);
		
		
		query_hit= new byte[23+1+2+4+4+x+16];

		// copying header
		System.arraycopy(header, 0, query_hit, 0, 23);

		
		// copying number of hits into number of hits field of queryhit
		query_hit[23]=(byte)hits.size();
		
		
		
		
		// copying port number into query hit msg
		byte[] port_no= new byte[2];
		port_no[0]= (byte)((Database.download_port>>8)&255);
		port_no[1]=(byte)((Database.download_port)&255);
					
		System.arraycopy(port_no, 0, query_hit, 23+1, 2);
					
					
		// dumping ip address
		System.arraycopy(Database.local_host.getAddress(),0, query_hit, 23+1+2, 4);
					
								
		//dumping speed value; speed value is in mbps
		temp=ByteBuffer.allocate(4).putInt(10).array();
		System.arraycopy(temp,0,query_hit, 23+1+2+4,4);
					
		
		int res=0;
		res+= 23+1+2+4+4;
		
		for(int i=0; i<hits.size(); i++){
				
			// dumping file index
			
			temp=ByteBuffer.allocate(4).putInt(hits.get(i).index).array();
			System.arraycopy(temp, 0, query_hit, res, 4);
			
			
			// dumping file size
			res+=4;
			temp=ByteBuffer.allocate(4).putInt(hits.get(i).size).array();
			System.arraycopy(temp, 0, query_hit, res, 4);
			
			// dumping file name
			res+=4;
			System.arraycopy(hits.get(i).name.getBytes(), 0	, query_hit, res, hits.get(i).name.getBytes().length);
			
			res+=hits.get(i).name.getBytes().length;
		}// end for loop for dumping result set into query hit
		
			// dumping servent id
			long most_sig_bits= Database.servent_id.getMostSignificantBits();
			long least_sig_bits= Database.servent_id.getLeastSignificantBits();
			byte[] msb= ByteBuffer.allocate(8).putLong(most_sig_bits).array();
			byte[] lsb= ByteBuffer.allocate(8).putLong(least_sig_bits).array();
			
			
			System.arraycopy(msb, 0,query_hit , res, 8);
			System.arraycopy(lsb, 0, query_hit,res+8 , 8);
				 
		
		
		
	}// query hit creator block

}// message class block
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;


public class Simpella {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub


		Database d=new Database();
		if(args.length==0){
			d.simpella_port=6346;
			d.download_port=5635;
		}
		else if(args.length==1){
			d.simpella_port=Integer.parseInt(args[0]);
		}
		else {
		d.download_port=Integer.parseInt(args[1]);
		d.simpella_port=Integer.parseInt(args[0]);
		}
		
		try {
			d.local_host=InetAddress.getByName("192.168.0.15");
			//d.local_host=InetAddress.getLocalHost();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		 System.out.println("Simpella Version 0.6 (c) ");
	TCPSimpella t=new TCPSimpella(d, Integer.parseInt(args[0]));
	
	//server thread that handles download requests
	  TCPDownload td= new TCPDownload(Integer.parseInt(args[1]), d);
	  System.out.println("Local Ip:"+d.local_host.toString());
	 
	 
	  InputCommandHandler ich=new InputCommandHandler(d);
	  IntelligentClientHandler tch=new IntelligentClientHandler(d);
	 
	}

}
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.UUID;

public class SimpellaSocketHandler extends Thread
{
Database d;
SimpellaConnections sc;
boolean incoming;
public SimpellaSocketHandler(Database d,SimpellaConnections sc,boolean incoming) {
this.d=d;
this.sc=sc;
this.incoming=incoming;
this.start();
}
public void run()
{
Socket s=sc.s;
try
{
	DataInputStream dis=new DataInputStream(s.getInputStream());
	byte b[]=new byte[4118];
	byte UID[]=new byte[16];
	while(true)
	{
		dis.read(b);
		for (int i=0;i<16;i++)
		{
			UID[i]=b[i];
			
		}
		
		//ping message handler block
		//===========================================================================
		
		if(b[16]==0)//PING
		{
	       boolean found=false;
	
	       //checking My ID's
	       for(int i=0;i<d.MyUUID_db.size();i++)
	       {
	    	   if(Arrays.equals(UID, d.MyUUID_db.get(i).GUID))
	    	   {
	    		  found=true;
	    	   }
	       }
	       
	       if(found)
	       continue;  //drop the packet and continue reading from socket
	       found=false;
	       
	       
		for (int i=0;i<d.RoutingTable_db.size();i++)
		{
			if(Arrays.equals(UID,d.RoutingTable_db.get(i).GUID ))
					{
				found=true;
				break;
					}
		}
		
		
		if(found)
		{
			//System.out.println("entered if found");
			d.packets_rcvd+=1;
			d.bytes_rcvd+=23;
			sc.packets_rxd+=1;
			sc.bytes_rxd+=23;
		}
		else
		{
//			System.out.println("entered else block of if found");
			d.packets_rcvd+=1;
			d.bytes_rcvd+=23;
			sc.packets_rxd+=1;
			sc.bytes_rxd+=23;
			RoutingTable rt=new RoutingTable();
			
			System.arraycopy(b, 0, rt.GUID,0,16);
		rt.s=s;
			synchronized (d.RoutingTable_db) {
			if(d.RoutingTable_db.size()<d.ROUTING_SIZE)
			d.RoutingTable_db.add(rt);
			else
			{
				d.RoutingTable_db.add(d.routing_position,rt);
				d.routing_position++;
				
			}
			
		}
		
		Message m=new Message(d);
		m.PongCreator(b);
		byte pong[]=m.pong;
		if(b[17]+b[18]>15||b[17]<=0)
		{
			   
				Socket sock=s;
				DataOutputStream dos=new DataOutputStream(sock.getOutputStream());
				dos.write(pong);
				//dos.close();
				d.packets_sent+=1;
				d.bytes_sent+=37;
				sc.packets_sent+=1;
				sc.bytes_sent+=37;
				System.out.println("pong written 1");
		}
		else
		{
			
			if(b[17]+b[18]>7)
				b[17]=(byte)(7-b[18]);
			
			//debug statement
			//System.out.println("pong written 2");
		
			b[17]--;
			b[18]++;
			
			Socket sock=s;
			DataOutputStream dos=new DataOutputStream(sock.getOutputStream());
			//debug statement
			//System.out.println("pong written  3");
			dos.write(pong);
			//debug statement
			//System.out.println("pong written 4");
			//dos.close();
			d.packets_sent+=1;
			d.bytes_sent+=37;
			sc.packets_sent+=1;
			sc.bytes_sent+=37;
			SimpellaConnections sc1;
			for(int i=0;i<d.SimpellaConnections_db.size();i++)
		{
			 //  System.out.println("entered forwarding block");
				sc1=d.SimpellaConnections_db.get(i);
				sock=d.SimpellaConnections_db.get(i).s;
			if(!s.equals(sock))
			{
				//debug statement
				//System.out.println("pong written 5");
				dos=new DataOutputStream(sock.getOutputStream());
			
			
			dos.write(b,0, 37);
			
			//dos.close();
			d.packets_sent+=1;
			d.bytes_sent+=23;
			sc1.packets_sent+=1;
			sc1.bytes_sent+=23;
		}
		}
		}
		
		
		}
		}
		
		// pong message handler block
		//=================================================================================
		else if(b[16]==0x01)//PONG
		{
int port=0;
			
			if(b[24]<0)
				 port=256*b[23]+b[24]+256;
			else
				port=256*b[23]+b[24];
			//String str=b[25]+"."+b[26]+"."+b[27]+"."+b[28];
			byte [] str = new byte[4];
			System.arraycopy(b, 25, str, 0, 4);
			InetAddress ip=InetAddress.getByAddress(str);
			
			d.packets_rcvd+=1;
			d.bytes_rcvd+=37;
			sc.packets_rxd+=1;
			sc.bytes_rxd+=37;
			boolean present=false;
			
			
			for(int i=0;i<d.MyUUID_db.size();i++)
		       {
		    	   if(Arrays.equals(UID, d.MyUUID_db.get(i).GUID))
		    	   {
		    		  present=true;
		    	
		    	   }
		       }
			if(present)//my own pong
			{
			
				
				HostInfo hi=new HostInfo();
				hi.ip=ip;
				hi.port_no=port;
				hi.files_shared=256*256*256*b[29]+256*256*b[30]+256*b[31]+b[32];
				hi.shared_size=256*256*256*b[33]+256*256*b[34]+256*b[35]+b[36];
				//addeded by ravikanth for updating info h bug
				d.total_files_shared+=hi.files_shared;
				d.total_size_of_files_shared+=hi.shared_size;
				d.total_no_of_hosts++;
				synchronized (d.HostInfo_db) {
				d.HostInfo_db.add(hi);
			}
			
				continue;
		}
			
			
			
			
			boolean found=false;
			int position=0;
		for (int i=0;i<d.RoutingTable_db.size();i++)
		{
			if(Arrays.equals(UID,d.RoutingTable_db.get(i).GUID ))
					{
				found=true;position=i;
				break;
					}
		}
		if(found)
		{
			
			if(b[17]+b[18]>15||b[17]<=0)
			{
				//dropping pong
			}
			else
			{
				if(b[17]+b[18]>7)
					b[17]=(byte)(7-b[18]);
				b[17]--;
				b[18]++;
				
					Socket sock=d.RoutingTable_db.get(position).s;
					SimpellaConnections sc1=null;
					for(int i=0;i<d.SimpellaConnections_db.size();i++)
					{
						if(d.SimpellaConnections_db.get(i).s.equals(sock))
						{
							sc1=d.SimpellaConnections_db.get(i);
						}
					}
					
					DataOutputStream dos=new DataOutputStream(sock.getOutputStream());
					dos.write(b);
				//	dos.close();
					d.packets_sent+=1;
					d.bytes_sent+=37;
					sc1.bytes_sent+=37;
					sc1.packets_sent+=1;
				
				
			}
		}
		
		
		
		// query message handler
		//============================================================================
		
		}
		else if(b[16]==-128)//QUERY
		{
		
			int length=0;
		    
		    
			byte temp[]=new byte[4];
			System.arraycopy(b, 19, temp,0,4);
			
			String str=String.valueOf(ByteBuffer.wrap(temp).getInt());
			// note : query length contains  payload length not length of query
			
			int query_length=Integer.parseInt(str);
			d.packets_rcvd+=1;
			d.bytes_rcvd=d.bytes_rcvd+23+query_length;
			d.queries_rcvd++;
			sc.packets_rxd+=1;
			sc.bytes_rxd=sc.bytes_rxd+23+query_length;
			
           boolean present=false;
			
			
			for(int i=0;i<d.MyUUID_db.size();i++)
		       {
		    	   if(Arrays.equals(UID, d.MyUUID_db.get(i).GUID))
		    	   {
		    		  present=true;
		    	
		    	   }
		       }
			
			if(present)
				continue;
			
			
		//monitor
			
			int i=25;
			while(b[i]!=0)
			{
				i++;
			}
			
			byte h[]=new byte[i-25+1];
			System.arraycopy(b,25, h, 0, i-25+1);
			String sq=new String(h);
		if(Database.monitor)
			System.out.println("Search: "+"'"+sq+"'");
			//monitor	
			// debug statement
			//System.out.println("creating query hit");
			int payload_length=0;
			Message m=new Message(d);
			m.QueryHitCreator(b);
			byte[]query_hit=m.query_hit;
			
			
			if(b[17]+b[18]>15||b[17]<=0)//dropping query and sending queryhit only
			{
				//send queryhit only if there is a hit in your shared library
				// above condition is not handled and query hit is forwarded irrespective of hits
				if(m.hits.size()>0){
					
					DataOutputStream dos=new DataOutputStream(s.getOutputStream());
					
					/*System.arraycopy(query_hit,19, temp,0, 4);		
					str=String.valueOf(ByteBuffer.wrap(temp).getInt());
					 payload_length=Integer.parseInt(str);
						*/
					//no need to do the above operation becoz u already calculated payload length above and store in query_length
							dos.write(query_hit);
						//	dos.close();
							d.packets_sent+=1;
							d.bytes_sent=d.bytes_sent+23+query_length;
							d.responses_sent++;
				}
					
			}
			
			//before flooding you should iterate thru routing table to see if it was already seen 
			// if it is not there in routing table it is a new one and an entry should be added in routing table
			boolean brand_new = true;
			 for( i=0;i<d.RoutingTable_db.size();i++){
				  if(Arrays.equals(UID, d.RoutingTable_db.get(i).GUID)){
					  brand_new= false;
					  
				  }
			 }
			// if it is a new query  update routing table
		    if(brand_new){
		    	RoutingTable new_entry= new RoutingTable();
		    	System.arraycopy(UID,0, new_entry.GUID,0,16);
		    	new_entry.s= s;
		    	d.RoutingTable_db.add(new_entry);
		    	
		    }
		    
		    // if it is a new query flood it after updating routing table 
			if(brand_new)//query flooding
			{
				if(b[17]+b[18]>7)
					b[17]=(byte)(7-b[18]);
				b[17]--;
				b[18]++;
				
					for (int j=0;j<d.SimpellaConnections_db.size();j++)
					{
						
						SimpellaConnections sc1=d.SimpellaConnections_db.get(j);
						Socket sock=d.SimpellaConnections_db.get(j).s;
						//System.out.println("flooding to same socket"+s.equals(sock));
						if(!s.equals(sock))
						{
						
						//debug statement
						//System.out.println("flooding the query for second time");
						DataOutputStream dos=new DataOutputStream(sock.getOutputStream());
						
						dos.write(b);
						//dos.close();
						d.packets_sent+=1;
						d.bytes_sent+=23+query_length;
						sc1.bytes_sent+=23+query_length;
						// bug 1
						sc1.packets_sent+=1;
					}
					}
				
					DataOutputStream dos=new DataOutputStream(s.getOutputStream());//sending queryhit 
					        dos.write(query_hit);
					        
					        //debug statements					        
					        //System.out.println("query hit written");
					        // for(int x=0;x<16;x++) System.out.println(" "+x+" "+query_hit[x]);
						
					        //	dos.close();
							d.packets_sent+=1;
							d.bytes_sent=d.bytes_sent+23+payload_length;
						d.responses_sent++;
						sc.bytes_sent=d.bytes_sent+23+payload_length;
						sc.packets_sent+=1;
					
			}
			
		}
		 
		
		// query hit handler block
		//===================================================================================
		else if(b[16]==-127)//QUERYHIT
		{
		    //debug statement
			//System.out.println("one query hit received");
			//byte[] s_id= new byte[16];
		    //System.arraycopy(b, 19, s_id, 0, 16);
		  
		    
		    
		  //updating rcvd packets , these are global values
		    byte temp[]=new byte[4];
			System.arraycopy(b, 19, temp,0,4);
			
			String str=String.valueOf(ByteBuffer.wrap(temp).getInt());
			int payload_length=Integer.parseInt(str);
			d.packets_rcvd+=1;
			d.bytes_rcvd=d.bytes_rcvd+23+payload_length;
            
			sc.bytes_rxd=d.bytes_rcvd+23+payload_length;
			sc.packets_rxd+=1;
             
			//debug statement
			//System.out.println("number of hits="+b[23]);
		    // iterate thru MyUUID_db to check if it is destined to me
		    
			boolean to_me=false; // variable to check if message is destined to me
		    boolean cool= true;
		    
		    //debug statement
			//System.out.println("size of my uuid table is "+d.MyUUID_db.size());
			for(int i=0; i<d.MyUUID_db.size();i++){
				
				if(Arrays.equals(UID, d.MyUUID_db.get(i).GUID))
				{
					to_me= true;
					break;
				}
		    }// end of iteration
		    
			if(!cool){
				to_me = true;
				break;
			}
			//debug statement
		    //  System.out.println("value of to_me is "+to_me);		    
		    // if message is destined to me
		    if(to_me){
		       
		    	//debug statement
		    	//System.out.println("message is destined to me");
				// calculating number of hits
					
				int hits= b[23];
				
				// retrieving port number
				int byte1;
				int byte2;
				byte1= b[24];
				byte2=b[25];
				if(byte1<0 ) byte1= byte1+255+1;
				if(byte2<0) byte2= byte2+255+1;
				
				
				// retreiving ip address
				InetAddress ip;
				System.arraycopy(b, 26, temp, 0, 4);
				ip=InetAddress.getByAddress(temp);
				
				// retreiving supported speed value
				int speed;
				System.arraycopy(b, 30, temp , 0, 4);
				speed=Integer.parseInt(String.valueOf(ByteBuffer.wrap(temp).getInt()));
				
				
			    int	l=23+1+2+4+4;
			    
			    // iteration thru result set
				for (int i=0; i<hits; i++){
                    
					 if(d.List_db.size() > 160 ){
					    d.List_db.remove(0);
					 }// if block that handles list size >160
						 
					 d.FindResult_db.add(new FindResult());
					 d.List_db.add(new List());
							
					int j=d.FindResult_db.size();
					int k=d.List_db.size();
							
							
					// updating ip address					
					d.FindResult_db.get(j-1).ip= ip;
					d.List_db.get(k-1).ip=ip;
						
					//updating port number for downloading the file not simpella port number
					d.FindResult_db.get(j-1).port_no= byte2 + (byte1*256);
					d.List_db.get(k-1).port_no=byte2 + (byte1*256);	
							
							
					// updating file index
					System.arraycopy(b, l, temp, 0, 4);
					d.FindResult_db.get(j-1).file_index= Integer.parseInt(String.valueOf(ByteBuffer.wrap(temp).getInt()));
					d.List_db.get(k-1).file_index=Integer.parseInt(String.valueOf(ByteBuffer.wrap(temp).getInt()));
					l+=4;
		                        
					//updating file size
					System.arraycopy(b, l, temp, 0, 4);
					d.FindResult_db.get(j-1).file_size= Integer.parseInt(String.valueOf(ByteBuffer.wrap(temp).getInt()));
					d.List_db.get(k-1).file_size=Integer.parseInt(String.valueOf(ByteBuffer.wrap(temp).getInt()));
					l+=4;
								
					int count=0;
					while(b[l+count]!=0) count++;
								
					byte[] name= new byte[count];
					System.arraycopy(b, l, name, 0, count);
								
					d.FindResult_db.get(j-1).file_name=(new String(name));
					d.List_db.get(k-1).file_name=(new String(name));
								
					l+=count+1;	
					 
												
					}// end of for loop which updates file names and sizes and indices
						

		    }// end of if block that handles messages destined to me
		    
		    else {
		    	
		    	// iterate thru routing table to forward it back to the querier
		    	
		    	for (int i=0; i< d.RoutingTable_db.size(); i++){
		    		
		    		// if guid is in the routing table forward it back to the socket from where it came
		    		if(Arrays.equals(UID, d.RoutingTable_db.get(i).GUID)){
		    			
		    			
		    			//debug statement
		    			//System.out.println("fowrading query hit to queries "+d.RoutingTable_db.get(i).s.getRemoteSocketAddress().toString());
		    			//////////////////
		    			
		    			DataOutputStream dos= new DataOutputStream(d.RoutingTable_db.get(i).s.getOutputStream());
		    			
		    			// bug 2 query flooding......
		    			dos.write(b);
		    		}
		    }
		    }
		
		}// end of query hit block 
		    


	}
}
catch(SocketException se)
{
synchronized (d.SimpellaConnections_db) {
	d.SimpellaConnections_db.remove(sc);
if(incoming)
	Database.no_incoming--;
else
	Database.no_outgoing--;
}
	
	System.out.println("Socket closed !!!");
}
catch(IOException io)
{
	io.printStackTrace();
}
catch(Exception e)
{
	e.printStackTrace();
}


}
}import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.StringTokenizer;

public class TCPDownloadHandler extends Thread {
	volatile Socket s;
	Database d;

	public TCPDownloadHandler(Socket s, Database d) {
		// TODO Auto-generated constructor stub
		this.s = s;
		this.d = d;
		this.start();
	}

	public void run() {
		try {
			
			
			Downloads download=new Downloads();
			
			int index = 0;
			String file_name = null;
			String file_path = null;
			InetAddress ip;
			int port;
			BufferedReader br = new BufferedReader(new InputStreamReader(
					this.s.getInputStream()));
			String c, s = "";
			int count = 0;
			
			
			while (!(c = br.readLine()).isEmpty()) {
				s = s + "\r\n" + c;
				count++;
				if (count > 10)
					throw new InvalidHttpException();
			}
			s = s + "\r\n\r\n";

			
			
			if (s.endsWith("\r\n\r\n"))
				;
			else
				throw new InvalidHttpException();
			
			//debug statement
			System.out.println("breakpoint 1");
			
			StringTokenizer str = new StringTokenizer(s, "\r\n");
			if (str.hasMoreElements()) 
			{
				
				StringTokenizer str1 = new StringTokenizer(str.nextToken());
				if (str1.hasMoreElements())
				{
					s = str1.nextToken();
					if (s.equals("GET"))
					{
						StringTokenizer str2;
						if (str1.hasMoreElements())
							str2 = new StringTokenizer(str1.nextToken(), "/");
						else
							throw new InvalidHttpException();
						System.out.println("breakpoint 2");
									int j=0;			
						s = str2.nextToken();
						if (s.equals("get")) {
							index = Integer.parseInt(str2.nextToken());
							if (str2.hasMoreElements())
								file_name = str2.nextToken();
							else
								throw new InvalidHttpException();
							if (str1.hasMoreElements())
							{
								while (str1.nextToken().toString()
										.equalsIgnoreCase("HTTP/1.1")&&j<20)
									
								{
									file_name+=" "+str1.nextToken().toString();
									j++;
								}
								if(j<20)
								{
									
								}
								else
									
									{
									throw new InvalidHttpException();
									}
							
							}	
							
								else
								throw new InvalidHttpException();
							
							
						} else
							throw new InvalidHttpException();
					} else
						throw new InvalidHttpException();
				
				System.out.println("breakpoint 3");
				// //Line 2
				
				 if(str.hasMoreElements())
				 {
				 s=str.nextToken();
				 str1=new StringTokenizer(s,":");
				 if(str1.hasMoreElements()&&str1.nextElement().equals("User-Agent"));
				 else
				 throw new InvalidHttpException();
				
				 }
				
				 else
				 throw new InvalidHttpException();
				 System.out.println("breakpoint 4");
				// Line 3
				boolean valid = false;
				while (str.hasMoreElements()) {
					s = str.nextToken();
					str1 = new StringTokenizer(s, ":");
					if (str1.hasMoreElements()
							&& str1.nextElement().toString()
									.equalsIgnoreCase("Host")) {
						
						System.out.println("breakpoint 5");
						valid = true;
						if (str1.hasMoreElements()) {

							ip = InetAddress.getByName(str1.nextToken().trim());
							download.ip=ip;
							if (str1.hasMoreElements()) {
								port = Integer
										.parseInt(str1.nextToken().trim());
							download.port=port;
							System.out.println("breakpoint 6");
							} else
								throw new InvalidHttpException();
						} else
							throw new InvalidHttpException();
						System.out.println("breakpoint 7");
					} 
					if (valid){
						System.out.println("breakpoint 8");
						break;
					}
						
				}
				if (!valid){
					System.out.println("breakpoint 9");
					throw new InvalidHttpException();
				}
					
			}
			
			else
				throw new InvalidHttpException();

			boolean file_found = false;
			long file_size = 0;
			for (int i = 0; i < d.SharedLibrary_db.size(); i++) {
				if (d.SharedLibrary_db.get(i).file_index == index
						&& d.SharedLibrary_db.get(i).file_name
								.equalsIgnoreCase(file_name)) {
					file_size = d.SharedLibrary_db.get(i).file_size;
					file_path = Database.file_directory;
					file_found = true;
					System.out.println("breakpoint 5 file found");
					break;
				}
			}
			
			
			
			if (file_found) {

				File f = new File(file_path, file_name);
				if (!f.isFile()) {
					s = "HTTP/1.1 503 File not found.\r\n\r\n";
					DataOutputStream d = new DataOutputStream(
							this.s.getOutputStream());
					d.writeBytes(s);
					this.s.close();
					
				} else {
					s = "HTTP/1.1 200 OK\r\nServer: Simpella0.6\r\nContent-type: application/binary\r\nContent-length: "
							+ file_size + "\r\n\r\n";
					DataOutputStream d = new DataOutputStream(
							this.s.getOutputStream());
					d.writeBytes(s);
					FileInputStream fis=new FileInputStream(f);
					int w=0;
					
					download.downloaded_size=0;
					download.downloaded_percentage=0;
					download.total_size=file_size;
					this.d.Downloads_db.add(download);
					byte b[]=new byte[1024];
					int i=0;
					while((w=fis.read())!=-1)
					{
					/*	b[i]=(byte)w;
						i++;
						if(i==1024)
						{
							i=0;
							d.write(b);
						}
						
						download.downloaded_size=download.downloaded_size+1;
						download.downloaded_percentage=(download.downloaded_size/download.total_size)*100;
						
						*/
						
						d.write(w);
					}
					if(i>0)
					{
						d.write(b, 0, i);
					}
					
					System.out.println("File"+file_name+ "sent successfully!!!");
					synchronized (this.d) {
						this.d.Downloads_db.remove(download);
					}                   
					d.close();
                     fis.close();
                     this.s.close();
                     
				}
			} else {
				s = "HTTP/1.1 503 File not found.\r\n\r\n";
				DataOutputStream d = new DataOutputStream(
						this.s.getOutputStream());
				d.writeBytes(s);
				this.s.close();
			}

		} 
		}catch (NumberFormatException e) {
			System.out.println("Invalid HTTP message!!!");
			try {
				this.s.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		} 
		
		catch(UnknownHostException e)
		{
			System.out.println("Invalid host address in HTTP message!!!");
		}
		catch (InvalidHttpException e) {
			System.out.println("Invalid HTTP message!!!");
			try {
				this.s.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

class InvalidHttpException extends Exception {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

}import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;


public class TCPDownload extends Thread {
	int server_port ;
	 Database d;
	
	 TCPDownload(int x,Database d) {
		  server_port= x;
		 this.d=d; 
		
		 this.start();
	 }
	 public void run () {
		try {
			ServerSocket listener = new ServerSocket(server_port);
			System.out.println("TCP Downloads Server running on port:"+server_port);
          while(true) {			
		    Socket s =listener.accept();
		    TCPDownloadHandler tcp=new TCPDownloadHandler(s,d);
		    System.out.println("got Download  request from "+s.getInetAddress());
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
}
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringTokenizer;


public class TCPSimpella extends Thread {
Database d;
int server_port;
TCPSimpella(Database d,int server_port)
{
	this.d=d;
	this.server_port=server_port;
	this.start();
}
public  void run()
{
	try {
		ServerSocket listener = new ServerSocket(server_port);
		System.out.println("Simpella Server running on port:"+server_port);
      while(true) {			
	    Socket s =listener.accept();
	    BufferedReader br=new BufferedReader(new InputStreamReader(s.getInputStream()));
	    String str=br.readLine();
	    StringTokenizer st=new StringTokenizer(str);
	    if(st.hasMoreElements())
	    {
	     
	    if(st.nextElement().equals("SIMPELLA"))
	    {
	    	if(st.hasMoreElements()&&st.nextElement().equals("CONNECT/0.6"))
	    	{
	    	if(Database.no_incoming<3)
	    	{
	    		String welcome="Welcome!!!";
	    		String reply="SIMPELLA/0.6 200 "+welcome+"\r\n";
	    		DataOutputStream dos=new DataOutputStream(s.getOutputStream());
	    		dos.writeBytes(reply);
	    		System.out.println(welcome);
	    		
	    		SimpellaConnections sc=new SimpellaConnections();
				sc.s=s;
				sc.port=s.getPort();///////////////////////////////////////////////////////////////////////////
				
				sc.ip=s.getInetAddress();
	    		synchronized (d.SimpellaConnections_db) {
					d.SimpellaConnections_db.add(sc);
					
				}
	    		SimpellaSocketHandler tcp=new SimpellaSocketHandler(d,sc,true);
	    System.out.println("got connection   request from "+s.getInetAddress());
	    	}
	    	else
	    	{
	    		String welcome="Maximum number of connections reached. Sorry!";
	    		String reply="SIMPELLA/0.6 503 "+welcome+"\r\n";
	    		DataOutputStream dos=new DataOutputStream(s.getOutputStream());
	    		dos.writeBytes(reply);
	    		System.out.println(welcome);
	    		s.close();
	    	
	    	}
	    	}
	    	else
	    	{
	    		System.out.println("Invalid Simpella request!!!");
		    	s.close();
	    	}
	    }
	    else
	    {
	    	System.out.println("Invalid Simpella request!!!");
	    	s.close();
	    }
	    }
	    else
	    {
	    	System.out.println("Invalid Simpella request!!!");
	    	s.close();
	    }
      }
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
}
}
